{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","cardsArray","robots","map","user","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","toLowerCase","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","includes","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAeeA,G,MAZF,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAb,OACT,oCACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BJ,GAAMK,IAAI,UAC5C,6BACI,4BAAKJ,GACL,2BAAIC,QCQLI,EAdE,SAAC,GAAgB,IACxBC,EADuB,EAAbC,OACUC,KAAI,SAACC,GAC3B,OACI,kBAAC,EAAD,CACIC,IAAKD,EAAKV,GACVA,GAAIU,EAAKV,GACTC,KAAMS,EAAKT,KACXC,MAAOQ,EAAKR,WAIxB,OAAO,6BAAMK,ICGFK,EAfG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,oCACI,yBAAKX,UAAU,QACX,2BACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,eACZC,SAAUH,OCMfI,G,MAdA,SAACC,GACZ,OACI,yBACIC,MAAO,CACHC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAGXJ,EAAMK,YCsCJC,E,kDA1CX,aAAe,IAAD,8BACV,gBAOJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,MAAMC,iBAPhD,EAAKC,MAAQ,CACTxB,OAAQ,GACRK,YAAa,IAJP,E,gEAYO,IAAD,OAChBoB,MAAM,8CACDC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEpB,OAAQ6B,S,+BAEvC,IAAD,EAC2BC,KAAKN,MAA7BxB,EADH,EACGA,OAAQK,EADX,EACWA,YACV0B,EAAiBD,KAAKN,MAAMxB,OAAOgC,QAAO,SAACC,GAC7C,OAAOA,EAAMxC,KAAK8B,cAAcW,SAAS7B,MAG7C,OAAKL,EAAOmC,OAIJ,oCACI,yBAAKxC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcwB,KAAKZ,iBAC9B,6BACA,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUlB,OAAQ+B,OAT3B,2C,GAzBDK,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1e56b446.chunk.js","sourcesContent":["import React from 'react';\nimport 'tachyons';\n\nconst Card = ({ id, name, email }) => (\n    <>\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}`} alt=\"robot\" />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    </>\n);\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    const cardsArray = robots.map((user) => {\n        return (\n            <Card\n                key={user.id}\n                id={user.id}\n                name={user.name}\n                email={user.email}\n            />\n        );\n    });\n    return <div>{cardsArray}</div>;\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n    return (\n        <>\n            <div className=\"pa2 \">\n                <input\n                    className=\"pa3 ba b--black bg-lightest-blue\"\n                    type=\"search\"\n                    placeholder=\"search robot\"\n                    onChange={searchChange}\n                ></input>\n            </div>\n        </>\n    );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div\n            style={{\n                overflowY: 'scroll',\n                border: '1px solid black',\n                height: '600px',\n            }}\n        >\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;\n","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchField: '',\n        };\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchField: event.target.value.toLowerCase() });\n    };\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then((response) => response.json())\n            .then((users) => this.setState({ robots: users }));\n    }\n    render() {\n        const { robots, searchField } = this.state;\n        const filteredRobots = this.state.robots.filter((robot) => {\n            return robot.name.toLowerCase().includes(searchField);\n        });\n        //if  robots.length === 0\n        if (!robots.length) {\n            return <h1>Loading</h1>;\n        } else {\n            return (\n                <>\n                    <div className=\"tc\">\n                        <h1 className=\"f1\">Robofriends</h1>\n                        <SearchBox searchChange={this.onSearchChange} />\n                        <hr />\n                        <Scroll>\n                            <CardList robots={filteredRobots} />\n                        </Scroll>\n                    </div>\n                </>\n            );\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}